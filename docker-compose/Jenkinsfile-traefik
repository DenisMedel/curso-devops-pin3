def inventory
def credNodoAplicacion
def credRegistry
def credAnsibleVaults

pipeline {
    agent { label 'agentesGenerales' }

    // Parámetros de Elección
    parameters {
        choice(name: 'Cliente', choices: ['CURSO', 'CLIENTE1','CLIENTE2'], description: 'Nombre Cliente')
        choice(name: 'Entorno', choices: ['Test', 'Demo', 'Prod'], description: 'Entorno')
    }

    stages {

        stage('Checkout de repositorio') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        stage('Variables para Ansible y Registry') {
            steps {
                script {
                    credRegistry = "REGISTRY_CREDENTIALS"
                    credNodoAplicacion = "MONITOREO_${params.Cliente}_${params.Entorno}".toUpperCase()
                    credAnsibleVaults = "MONITOREO_ANSIBLE_VAULTS_${params.Cliente}_${params.Entorno}".toUpperCase()
                    inventory = "inventory-agentes-${params.Cliente}-${params.Entorno}-encrypted.yml".toLowerCase()
                }
            }
        }

        stage('Deploy de Traefik-Frontend') {
            environment {
                ANSIBLE_CONFIG = "${WORKSPACE}/docker-compose/ansible/ansible.cfg"
            }
            steps {
                script {
                    withCredentials([
                        usernamePassword(
                            credentialsId: credRegistry,
                            passwordVariable: 'registryPwd',
                            usernameVariable: 'registryUsr')]) {
                        ansiblePlaybook(
                            colorized: true,
                            credentialsId: credNodoAplicacion,
                            disableHostKeyChecking: true,
                            inventory: "${WORKSPACE}/docker-compose/ansible/${inventory}",
                            playbook: "${WORKSPACE}/docker-compose/ansible/playbook-traefik.yml",
                            vaultCredentialsId: credAnsibleVaults,
                        )
                    }
                }
            }
        }
    }
}
